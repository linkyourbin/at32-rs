#![doc = "Peripheral access API for AT32F403AXX_V2 microcontrollers (generated using svd2rust v0.37.0 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.37.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 4;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
unsafe extern "C" {
    fn WWDT();
    fn PVM();
    fn TAMPER();
    fn RTC();
    fn FLASH();
    fn CRM();
    fn EXINT0();
    fn EXINT1();
    fn EXINT2();
    fn EXINT3();
    fn EXINT4();
    fn DMA1_Channel1();
    fn DMA1_Channel2();
    fn DMA1_Channel3();
    fn DMA1_Channel4();
    fn DMA1_Channel5();
    fn DMA1_Channel6();
    fn DMA1_Channel7();
    fn ADC1_2();
    fn USBFS_H_CAN1_TX();
    fn USBFS_L_CAN1_RX0();
    fn CAN_RX1();
    fn CAN_SE();
    fn EXINT9_5();
    fn TMR1_BRK_TMR9();
    fn TMR1_OVF_TMR10();
    fn TMR1_TRG_HALL_TMR11();
    fn TMR1_CH();
    fn TMR2();
    fn TMR3();
    fn TMR4();
    fn I2C1_EVT();
    fn I2C1_ERR();
    fn I2C2_EVT();
    fn I2C2_ERR();
    fn SPI1();
    fn SPI2();
    fn USART1();
    fn USART2();
    fn USART3();
    fn EXINT15_10();
    fn RTCALARM();
    fn USBFSWakeUp();
    fn TMR8_BRK_TMR12();
    fn TMR8_OVF_TMR13();
    fn TMR8_TRG_HALL_TMR14();
    fn TMR8_CH();
    fn ADC3();
    fn XMC();
    fn SDIO1();
    fn TMR5();
    fn SPI3();
    fn UART4();
    fn UART5();
    fn TMR6();
    fn TMR7();
    fn DMA2_Channel1();
    fn DMA2_Channel2();
    fn DMA2_Channel3();
    fn DMA2_Channel4_5();
    fn SDIO2();
    fn I2C3_EVT();
    fn I2C3_ERR();
    fn SPI4();
    fn CAN2_TX();
    fn CAN2_RX0();
    fn CAN2_RX1();
    fn CAN2_SE();
    fn DMA2_Channel6_7();
    fn USART6();
    fn UART7();
    fn UART8();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[unsafe(link_section = ".vector_table.interrupts")]
#[unsafe(no_mangle)]
pub static __INTERRUPTS: [Vector; 79] = [
    Vector { _handler: WWDT },
    Vector { _handler: PVM },
    Vector { _handler: TAMPER },
    Vector { _handler: RTC },
    Vector { _handler: FLASH },
    Vector { _handler: CRM },
    Vector { _handler: EXINT0 },
    Vector { _handler: EXINT1 },
    Vector { _handler: EXINT2 },
    Vector { _handler: EXINT3 },
    Vector { _handler: EXINT4 },
    Vector {
        _handler: DMA1_Channel1,
    },
    Vector {
        _handler: DMA1_Channel2,
    },
    Vector {
        _handler: DMA1_Channel3,
    },
    Vector {
        _handler: DMA1_Channel4,
    },
    Vector {
        _handler: DMA1_Channel5,
    },
    Vector {
        _handler: DMA1_Channel6,
    },
    Vector {
        _handler: DMA1_Channel7,
    },
    Vector { _handler: ADC1_2 },
    Vector {
        _handler: USBFS_H_CAN1_TX,
    },
    Vector {
        _handler: USBFS_L_CAN1_RX0,
    },
    Vector { _handler: CAN_RX1 },
    Vector { _handler: CAN_SE },
    Vector { _handler: EXINT9_5 },
    Vector {
        _handler: TMR1_BRK_TMR9,
    },
    Vector {
        _handler: TMR1_OVF_TMR10,
    },
    Vector {
        _handler: TMR1_TRG_HALL_TMR11,
    },
    Vector { _handler: TMR1_CH },
    Vector { _handler: TMR2 },
    Vector { _handler: TMR3 },
    Vector { _handler: TMR4 },
    Vector { _handler: I2C1_EVT },
    Vector { _handler: I2C1_ERR },
    Vector { _handler: I2C2_EVT },
    Vector { _handler: I2C2_ERR },
    Vector { _handler: SPI1 },
    Vector { _handler: SPI2 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector { _handler: USART3 },
    Vector {
        _handler: EXINT15_10,
    },
    Vector { _handler: RTCALARM },
    Vector {
        _handler: USBFSWakeUp,
    },
    Vector {
        _handler: TMR8_BRK_TMR12,
    },
    Vector {
        _handler: TMR8_OVF_TMR13,
    },
    Vector {
        _handler: TMR8_TRG_HALL_TMR14,
    },
    Vector { _handler: TMR8_CH },
    Vector { _handler: ADC3 },
    Vector { _handler: XMC },
    Vector { _handler: SDIO1 },
    Vector { _handler: TMR5 },
    Vector { _handler: SPI3 },
    Vector { _handler: UART4 },
    Vector { _handler: UART5 },
    Vector { _handler: TMR6 },
    Vector { _handler: TMR7 },
    Vector {
        _handler: DMA2_Channel1,
    },
    Vector {
        _handler: DMA2_Channel2,
    },
    Vector {
        _handler: DMA2_Channel3,
    },
    Vector {
        _handler: DMA2_Channel4_5,
    },
    Vector { _handler: SDIO2 },
    Vector { _handler: I2C3_EVT },
    Vector { _handler: I2C3_ERR },
    Vector { _handler: SPI4 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _handler: CAN2_TX },
    Vector { _handler: CAN2_RX0 },
    Vector { _handler: CAN2_RX1 },
    Vector { _handler: CAN2_SE },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector { _reserved: 0 },
    Vector {
        _handler: DMA2_Channel6_7,
    },
    Vector { _handler: USART6 },
    Vector { _handler: UART7 },
    Vector { _handler: UART8 },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - Window Watchdog interrupt"]
    WWDT = 0,
    #[doc = "1 - PVM interrupt connect to EXINT line16"]
    PVM = 1,
    #[doc = "2 - Tamper interrupt"]
    TAMPER = 2,
    #[doc = "3 - RTC global interrupt"]
    RTC = 3,
    #[doc = "4 - Flash global interrupt"]
    FLASH = 4,
    #[doc = "5 - CRM global interrupt"]
    CRM = 5,
    #[doc = "6 - EXINT Line0 interrupt"]
    EXINT0 = 6,
    #[doc = "7 - EXINT Line1 interrupt"]
    EXINT1 = 7,
    #[doc = "8 - EXINT Line2 interrupt"]
    EXINT2 = 8,
    #[doc = "9 - EXINT Line3 interrupt"]
    EXINT3 = 9,
    #[doc = "10 - EXINT Line4 interrupt"]
    EXINT4 = 10,
    #[doc = "11 - DMA1 Channel1 global interrupt"]
    DMA1_Channel1 = 11,
    #[doc = "12 - DMA1 Channel2 global interrupt"]
    DMA1_Channel2 = 12,
    #[doc = "13 - DMA1 Channel3 global interrupt"]
    DMA1_Channel3 = 13,
    #[doc = "14 - DMA1 Channel4 global interrupt"]
    DMA1_Channel4 = 14,
    #[doc = "15 - DMA1 Channel5 global interrupt"]
    DMA1_Channel5 = 15,
    #[doc = "16 - DMA1 Channel6 global interrupt"]
    DMA1_Channel6 = 16,
    #[doc = "17 - DMA1 Channel7 global interrupt"]
    DMA1_Channel7 = 17,
    #[doc = "18 - ADC1 and ADC2 global interrupt"]
    ADC1_2 = 18,
    #[doc = "19 - CAN1 TX interrupt"]
    USBFS_H_CAN1_TX = 19,
    #[doc = "20 - CAN1 RX0 interrupt"]
    USBFS_L_CAN1_RX0 = 20,
    #[doc = "21 - CAN1 RX1 interrupt"]
    CAN_RX1 = 21,
    #[doc = "22 - CAN1 SE interrupt"]
    CAN_SE = 22,
    #[doc = "23 - EXINT Line\\[9:5\\] interrupts"]
    EXINT9_5 = 23,
    #[doc = "24 - TMR1 brake interrupt and TMR9 global interrupt"]
    TMR1_BRK_TMR9 = 24,
    #[doc = "25 - TMR1 overflow interrupt and TMR10 global interrupt"]
    TMR1_OVF_TMR10 = 25,
    #[doc = "26 - TMR1 trigger and HALL interrupts and TMR11 global interrupt"]
    TMR1_TRG_HALL_TMR11 = 26,
    #[doc = "27 - TMR1 channel interrupt"]
    TMR1_CH = 27,
    #[doc = "28 - TMR2 global interrupt"]
    TMR2 = 28,
    #[doc = "29 - TMR3 global interrupt"]
    TMR3 = 29,
    #[doc = "30 - TMR4 global interrupt"]
    TMR4 = 30,
    #[doc = "31 - I2C1 event interrupt"]
    I2C1_EVT = 31,
    #[doc = "32 - I2C1 error interrupt"]
    I2C1_ERR = 32,
    #[doc = "33 - I2C2 event interrupt"]
    I2C2_EVT = 33,
    #[doc = "34 - I2C2 error interrupt"]
    I2C2_ERR = 34,
    #[doc = "35 - SPI1 global interrupt"]
    SPI1 = 35,
    #[doc = "36 - SPI2 global interrupt"]
    SPI2 = 36,
    #[doc = "37 - USART1 global interrupt"]
    USART1 = 37,
    #[doc = "38 - USART2 global interrupt"]
    USART2 = 38,
    #[doc = "39 - USART3 global interrupt"]
    USART3 = 39,
    #[doc = "40 - EXINT Line\\[15:10\\] interrupts"]
    EXINT15_10 = 40,
    #[doc = "41 - RTC Alarm interrupt connect to EXINT line17"]
    RTCALARM = 41,
    #[doc = "42 - USB Device FS Wakeup interrupt connect to EXINT line18"]
    USBFSWakeUp = 42,
    #[doc = "43 - TMR8 brake interrupt and TMR12 global interrupt"]
    TMR8_BRK_TMR12 = 43,
    #[doc = "44 - TMR8 overflow interrupt and TMR13 global interrupt"]
    TMR8_OVF_TMR13 = 44,
    #[doc = "45 - TMR8 trigger and HALL interrupts and TMR14 global interrupt"]
    TMR8_TRG_HALL_TMR14 = 45,
    #[doc = "46 - TMR8 channel interrupt"]
    TMR8_CH = 46,
    #[doc = "47 - ADC3 global interrupt"]
    ADC3 = 47,
    #[doc = "48 - XMC global interrupt"]
    XMC = 48,
    #[doc = "49 - SDIO1 global interrupt"]
    SDIO1 = 49,
    #[doc = "50 - TMR5 global interrupt"]
    TMR5 = 50,
    #[doc = "51 - SPI3 global interrupt"]
    SPI3 = 51,
    #[doc = "52 - UART4 global interrupt"]
    UART4 = 52,
    #[doc = "53 - UART5 global interrupt"]
    UART5 = 53,
    #[doc = "54 - TMR6 global interrupt"]
    TMR6 = 54,
    #[doc = "55 - TMR7 global interrupt"]
    TMR7 = 55,
    #[doc = "56 - DMA2 Channel1 global interrupt"]
    DMA2_Channel1 = 56,
    #[doc = "57 - DMA2 Channel2 global interrupt"]
    DMA2_Channel2 = 57,
    #[doc = "58 - DMA2 Channel3 global interrupt"]
    DMA2_Channel3 = 58,
    #[doc = "59 - DMA2 Channel4 and DMA2 Channel5 global interrupt"]
    DMA2_Channel4_5 = 59,
    #[doc = "60 - SDIO2 global interrupt"]
    SDIO2 = 60,
    #[doc = "61 - I2C3 event interrupt"]
    I2C3_EVT = 61,
    #[doc = "62 - I2C3 error interrupt"]
    I2C3_ERR = 62,
    #[doc = "63 - SPI4 global interrupt"]
    SPI4 = 63,
    #[doc = "68 - CAN2 TX interrupt"]
    CAN2_TX = 68,
    #[doc = "69 - CAN2 RX0 interrupt"]
    CAN2_RX0 = 69,
    #[doc = "70 - CAN2 RX1 interrupt"]
    CAN2_RX1 = 70,
    #[doc = "71 - CAN2 SE interrupt"]
    CAN2_SE = 71,
    #[doc = "75 - DMA2 Channel6 and DMA2 Channel7 global interrupt"]
    DMA2_Channel6_7 = 75,
    #[doc = "76 - USART6 global interrupt"]
    USART6 = 76,
    #[doc = "77 - UART7 global interrupt"]
    UART7 = 77,
    #[doc = "78 - UART8 global interrupt"]
    UART8 = 78,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "Flexible static memory controller"]
pub type Xmc = crate::Periph<xmc::RegisterBlock, 0xa000_0000>;
impl core::fmt::Debug for Xmc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Xmc").finish()
    }
}
#[doc = "Flexible static memory controller"]
pub mod xmc;
#[doc = "Power control"]
pub type Pwc = crate::Periph<pwc::RegisterBlock, 0x4000_7000>;
impl core::fmt::Debug for Pwc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwc").finish()
    }
}
#[doc = "Power control"]
pub mod pwc;
#[doc = "Clock and reset management"]
pub type Crm = crate::Periph<crm::RegisterBlock, 0x4002_1000>;
impl core::fmt::Debug for Crm {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crm").finish()
    }
}
#[doc = "Clock and reset management"]
pub mod crm;
#[doc = "General purpose IO"]
pub type Gpioa = crate::Periph<gpioa::RegisterBlock, 0x4001_0800>;
impl core::fmt::Debug for Gpioa {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioa").finish()
    }
}
#[doc = "General purpose IO"]
pub mod gpioa;
#[doc = "General purpose IO"]
pub type Gpiob = crate::Periph<gpioa::RegisterBlock, 0x4001_0c00>;
impl core::fmt::Debug for Gpiob {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiob").finish()
    }
}
#[doc = "General purpose IO"]
pub use self::gpioa as gpiob;
#[doc = "General purpose IO"]
pub type Gpioc = crate::Periph<gpioa::RegisterBlock, 0x4001_1000>;
impl core::fmt::Debug for Gpioc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioc").finish()
    }
}
#[doc = "General purpose IO"]
pub use self::gpioa as gpioc;
#[doc = "General purpose IO"]
pub type Gpiod = crate::Periph<gpioa::RegisterBlock, 0x4001_1400>;
impl core::fmt::Debug for Gpiod {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiod").finish()
    }
}
#[doc = "General purpose IO"]
pub use self::gpioa as gpiod;
#[doc = "General purpose IO"]
pub type Gpioe = crate::Periph<gpioa::RegisterBlock, 0x4001_1800>;
impl core::fmt::Debug for Gpioe {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioe").finish()
    }
}
#[doc = "General purpose IO"]
pub use self::gpioa as gpioe;
#[doc = "IO MUX function"]
pub type Iomux = crate::Periph<iomux::RegisterBlock, 0x4001_0000>;
impl core::fmt::Debug for Iomux {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iomux").finish()
    }
}
#[doc = "IO MUX function"]
pub mod iomux;
#[doc = "EXINT"]
pub type Exint = crate::Periph<exint::RegisterBlock, 0x4001_0400>;
impl core::fmt::Debug for Exint {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Exint").finish()
    }
}
#[doc = "EXINT"]
pub mod exint;
#[doc = "DMA controller"]
pub type Dma1 = crate::Periph<dma1::RegisterBlock, 0x4002_0000>;
impl core::fmt::Debug for Dma1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma1").finish()
    }
}
#[doc = "DMA controller"]
pub mod dma1;
#[doc = "DMA controller"]
pub type Dma2 = crate::Periph<dma1::RegisterBlock, 0x4002_0400>;
impl core::fmt::Debug for Dma2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma2").finish()
    }
}
#[doc = "DMA controller"]
pub use self::dma1 as dma2;
#[doc = "Secure digital input/output interface"]
pub type Sdio1 = crate::Periph<sdio1::RegisterBlock, 0x4001_8000>;
impl core::fmt::Debug for Sdio1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sdio1").finish()
    }
}
#[doc = "Secure digital input/output interface"]
pub mod sdio1;
#[doc = "Secure digital input/output interface"]
pub type Sdio2 = crate::Periph<sdio1::RegisterBlock, 0x4002_3400>;
impl core::fmt::Debug for Sdio2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sdio2").finish()
    }
}
#[doc = "Secure digital input/output interface"]
pub use self::sdio1 as sdio2;
#[doc = "Real time clock"]
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x4000_2800>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "Real time clock"]
pub mod rtc;
#[doc = "Battery powered register"]
pub type Bpr = crate::Periph<bpr::RegisterBlock, 0x4000_6c04>;
impl core::fmt::Debug for Bpr {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Bpr").finish()
    }
}
#[doc = "Battery powered register"]
pub mod bpr;
#[doc = "Watchdog"]
pub type Wdt = crate::Periph<wdt::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for Wdt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdt").finish()
    }
}
#[doc = "Watchdog"]
pub mod wdt;
#[doc = "Window watchdog"]
pub type Wwdt = crate::Periph<wwdt::RegisterBlock, 0x4000_2c00>;
impl core::fmt::Debug for Wwdt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wwdt").finish()
    }
}
#[doc = "Window watchdog"]
pub mod wwdt;
#[doc = "Advanced timer"]
pub type Tmr1 = crate::Periph<tmr1::RegisterBlock, 0x4001_2c00>;
impl core::fmt::Debug for Tmr1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr1").finish()
    }
}
#[doc = "Advanced timer"]
pub mod tmr1;
#[doc = "Advanced timer"]
pub type Tmr8 = crate::Periph<tmr1::RegisterBlock, 0x4001_3400>;
impl core::fmt::Debug for Tmr8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr8").finish()
    }
}
#[doc = "Advanced timer"]
pub use self::tmr1 as tmr8;
#[doc = "General purpose timer"]
pub type Tmr2 = crate::Periph<tmr2::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for Tmr2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr2").finish()
    }
}
#[doc = "General purpose timer"]
pub mod tmr2;
#[doc = "General purpose timer"]
pub type Tmr3 = crate::Periph<tmr3::RegisterBlock, 0x4000_0400>;
impl core::fmt::Debug for Tmr3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr3").finish()
    }
}
#[doc = "General purpose timer"]
pub mod tmr3;
#[doc = "General purpose timer"]
pub type Tmr4 = crate::Periph<tmr3::RegisterBlock, 0x4000_0800>;
impl core::fmt::Debug for Tmr4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr4").finish()
    }
}
#[doc = "General purpose timer"]
pub use self::tmr3 as tmr4;
#[doc = "General purpose timer"]
pub type Tmr5 = crate::Periph<tmr2::RegisterBlock, 0x4000_0c00>;
impl core::fmt::Debug for Tmr5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr5").finish()
    }
}
#[doc = "General purpose timer"]
pub use self::tmr2 as tmr5;
#[doc = "General purpose timer"]
pub type Tmr9 = crate::Periph<tmr9::RegisterBlock, 0x4001_4c00>;
impl core::fmt::Debug for Tmr9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr9").finish()
    }
}
#[doc = "General purpose timer"]
pub mod tmr9;
#[doc = "General purpose timer"]
pub type Tmr12 = crate::Periph<tmr9::RegisterBlock, 0x4000_1800>;
impl core::fmt::Debug for Tmr12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr12").finish()
    }
}
#[doc = "General purpose timer"]
pub use self::tmr9 as tmr12;
#[doc = "General purpose timer"]
pub type Tmr10 = crate::Periph<tmr10::RegisterBlock, 0x4001_5000>;
impl core::fmt::Debug for Tmr10 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr10").finish()
    }
}
#[doc = "General purpose timer"]
pub mod tmr10;
#[doc = "General purpose timer"]
pub type Tmr11 = crate::Periph<tmr10::RegisterBlock, 0x4001_5400>;
impl core::fmt::Debug for Tmr11 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr11").finish()
    }
}
#[doc = "General purpose timer"]
pub use self::tmr10 as tmr11;
#[doc = "HICK Auto Clock Calibration"]
pub type Acc = crate::Periph<acc::RegisterBlock, 0x4001_5800>;
impl core::fmt::Debug for Acc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Acc").finish()
    }
}
#[doc = "HICK Auto Clock Calibration"]
pub mod acc;
#[doc = "General purpose timer"]
pub type Tmr13 = crate::Periph<tmr10::RegisterBlock, 0x4000_1c00>;
impl core::fmt::Debug for Tmr13 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr13").finish()
    }
}
#[doc = "General purpose timer"]
pub use self::tmr10 as tmr13;
#[doc = "General purpose timer"]
pub type Tmr14 = crate::Periph<tmr10::RegisterBlock, 0x4000_2000>;
impl core::fmt::Debug for Tmr14 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr14").finish()
    }
}
#[doc = "General purpose timer"]
pub use self::tmr10 as tmr14;
#[doc = "Basic timer"]
pub type Tmr6 = crate::Periph<tmr6::RegisterBlock, 0x4000_1000>;
impl core::fmt::Debug for Tmr6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr6").finish()
    }
}
#[doc = "Basic timer"]
pub mod tmr6;
#[doc = "Basic timer"]
pub type Tmr7 = crate::Periph<tmr6::RegisterBlock, 0x4000_1400>;
impl core::fmt::Debug for Tmr7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr7").finish()
    }
}
#[doc = "Basic timer"]
pub use self::tmr6 as tmr7;
#[doc = "Inter integrated circuit"]
pub type I2c1 = crate::Periph<i2c1::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for I2c1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c1").finish()
    }
}
#[doc = "Inter integrated circuit"]
pub mod i2c1;
#[doc = "Inter integrated circuit"]
pub type I2c2 = crate::Periph<i2c1::RegisterBlock, 0x4000_5800>;
impl core::fmt::Debug for I2c2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c2").finish()
    }
}
#[doc = "Inter integrated circuit"]
pub use self::i2c1 as i2c2;
#[doc = "Inter integrated circuit"]
pub type I2c3 = crate::Periph<i2c1::RegisterBlock, 0x4001_5c00>;
impl core::fmt::Debug for I2c3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c3").finish()
    }
}
#[doc = "Inter integrated circuit"]
pub use self::i2c1 as i2c3;
#[doc = "Serial peripheral interface"]
pub type Spi1 = crate::Periph<spi1::RegisterBlock, 0x4001_3000>;
impl core::fmt::Debug for Spi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi1").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub mod spi1;
#[doc = "Serial peripheral interface"]
pub type Spi2 = crate::Periph<spi1::RegisterBlock, 0x4000_3800>;
impl core::fmt::Debug for Spi2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi2").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as spi2;
#[doc = "Serial peripheral interface"]
pub type Spi3 = crate::Periph<spi1::RegisterBlock, 0x4000_3c00>;
impl core::fmt::Debug for Spi3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi3").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as spi3;
#[doc = "Serial peripheral interface"]
pub type Spi4 = crate::Periph<spi1::RegisterBlock, 0x4000_4000>;
impl core::fmt::Debug for Spi4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi4").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as spi4;
#[doc = "Serial peripheral interface"]
pub type I2s2Ext = crate::Periph<spi1::RegisterBlock, 0x4001_6c00>;
impl core::fmt::Debug for I2s2Ext {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2s2Ext").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as i2s2_ext;
#[doc = "Serial peripheral interface"]
pub type I2s3Ext = crate::Periph<spi1::RegisterBlock, 0x4001_7000>;
impl core::fmt::Debug for I2s3Ext {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2s3Ext").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi1 as i2s3_ext;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart1 = crate::Periph<usart1::RegisterBlock, 0x4001_3800>;
impl core::fmt::Debug for Usart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart1").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart1;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart2 = crate::Periph<usart1::RegisterBlock, 0x4000_4400>;
impl core::fmt::Debug for Usart2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart2").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart2;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart3 = crate::Periph<usart1::RegisterBlock, 0x4000_4800>;
impl core::fmt::Debug for Usart3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart3").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart3;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub type Usart6 = crate::Periph<usart1::RegisterBlock, 0x4001_6000>;
impl core::fmt::Debug for Usart6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart6").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart1 as usart6;
#[doc = "Analog to digital converter"]
pub type Adc1 = crate::Periph<adc1::RegisterBlock, 0x4001_2400>;
impl core::fmt::Debug for Adc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc1").finish()
    }
}
#[doc = "Analog to digital converter"]
pub mod adc1;
#[doc = "Analog to digital converter"]
pub type Adc2 = crate::Periph<adc2::RegisterBlock, 0x4001_2800>;
impl core::fmt::Debug for Adc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc2").finish()
    }
}
#[doc = "Analog to digital converter"]
pub mod adc2;
#[doc = "Analog to digital converter"]
pub type Adc3 = crate::Periph<adc3::RegisterBlock, 0x4001_3c00>;
impl core::fmt::Debug for Adc3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc3").finish()
    }
}
#[doc = "Analog to digital converter"]
pub mod adc3;
#[doc = "Can controller area network"]
pub type Can1 = crate::Periph<can1::RegisterBlock, 0x4000_6400>;
impl core::fmt::Debug for Can1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Can1").finish()
    }
}
#[doc = "Can controller area network"]
pub mod can1;
#[doc = "Can controller area network"]
pub type Can2 = crate::Periph<can1::RegisterBlock, 0x4000_6800>;
impl core::fmt::Debug for Can2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Can2").finish()
    }
}
#[doc = "Can controller area network"]
pub use self::can1 as can2;
#[doc = "Digital to analog converter"]
pub type Dac = crate::Periph<dac::RegisterBlock, 0x4000_7400>;
impl core::fmt::Debug for Dac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac").finish()
    }
}
#[doc = "Digital to analog converter"]
pub mod dac;
#[doc = "Debug support"]
pub type Debug = crate::Periph<debug::RegisterBlock, 0xe004_2000>;
impl core::fmt::Debug for Debug {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Debug").finish()
    }
}
#[doc = "Debug support"]
pub mod debug;
#[doc = "Universal asynchronous receiver transmitter"]
pub type Uart4 = crate::Periph<usart1::RegisterBlock, 0x4000_4c00>;
impl core::fmt::Debug for Uart4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart4").finish()
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub use self::usart1 as uart4;
#[doc = "Universal asynchronous receiver transmitter"]
pub type Uart5 = crate::Periph<usart1::RegisterBlock, 0x4000_5000>;
impl core::fmt::Debug for Uart5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart5").finish()
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub use self::usart1 as uart5;
#[doc = "Universal asynchronous receiver transmitter"]
pub type Uart7 = crate::Periph<usart1::RegisterBlock, 0x4001_6400>;
impl core::fmt::Debug for Uart7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart7").finish()
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub use self::usart1 as uart7;
#[doc = "Universal asynchronous receiver transmitter"]
pub type Uart8 = crate::Periph<usart1::RegisterBlock, 0x4001_6800>;
impl core::fmt::Debug for Uart8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart8").finish()
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub use self::usart1 as uart8;
#[doc = "CRC calculation unit"]
pub type Crc = crate::Periph<crc::RegisterBlock, 0x4002_3000>;
impl core::fmt::Debug for Crc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crc").finish()
    }
}
#[doc = "CRC calculation unit"]
pub mod crc;
#[doc = "Flash memory controler"]
pub type Flash = crate::Periph<flash::RegisterBlock, 0x4002_2000>;
impl core::fmt::Debug for Flash {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Flash").finish()
    }
}
#[doc = "Flash memory controler"]
pub mod flash;
#[doc = "Universal serial bus full-speed device interface"]
pub type Usbfs = crate::Periph<usbfs::RegisterBlock, 0x4000_5c00>;
impl core::fmt::Debug for Usbfs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usbfs").finish()
    }
}
#[doc = "Universal serial bus full-speed device interface"]
pub mod usbfs;
#[unsafe(no_mangle)]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "XMC"]
    pub xmc: Xmc,
    #[doc = "PWC"]
    pub pwc: Pwc,
    #[doc = "CRM"]
    pub crm: Crm,
    #[doc = "GPIOA"]
    pub gpioa: Gpioa,
    #[doc = "GPIOB"]
    pub gpiob: Gpiob,
    #[doc = "GPIOC"]
    pub gpioc: Gpioc,
    #[doc = "GPIOD"]
    pub gpiod: Gpiod,
    #[doc = "GPIOE"]
    pub gpioe: Gpioe,
    #[doc = "IOMUX"]
    pub iomux: Iomux,
    #[doc = "EXINT"]
    pub exint: Exint,
    #[doc = "DMA1"]
    pub dma1: Dma1,
    #[doc = "DMA2"]
    pub dma2: Dma2,
    #[doc = "SDIO1"]
    pub sdio1: Sdio1,
    #[doc = "SDIO2"]
    pub sdio2: Sdio2,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "BPR"]
    pub bpr: Bpr,
    #[doc = "WDT"]
    pub wdt: Wdt,
    #[doc = "WWDT"]
    pub wwdt: Wwdt,
    #[doc = "TMR1"]
    pub tmr1: Tmr1,
    #[doc = "TMR8"]
    pub tmr8: Tmr8,
    #[doc = "TMR2"]
    pub tmr2: Tmr2,
    #[doc = "TMR3"]
    pub tmr3: Tmr3,
    #[doc = "TMR4"]
    pub tmr4: Tmr4,
    #[doc = "TMR5"]
    pub tmr5: Tmr5,
    #[doc = "TMR9"]
    pub tmr9: Tmr9,
    #[doc = "TMR12"]
    pub tmr12: Tmr12,
    #[doc = "TMR10"]
    pub tmr10: Tmr10,
    #[doc = "TMR11"]
    pub tmr11: Tmr11,
    #[doc = "ACC"]
    pub acc: Acc,
    #[doc = "TMR13"]
    pub tmr13: Tmr13,
    #[doc = "TMR14"]
    pub tmr14: Tmr14,
    #[doc = "TMR6"]
    pub tmr6: Tmr6,
    #[doc = "TMR7"]
    pub tmr7: Tmr7,
    #[doc = "I2C1"]
    pub i2c1: I2c1,
    #[doc = "I2C2"]
    pub i2c2: I2c2,
    #[doc = "I2C3"]
    pub i2c3: I2c3,
    #[doc = "SPI1"]
    pub spi1: Spi1,
    #[doc = "SPI2"]
    pub spi2: Spi2,
    #[doc = "SPI3"]
    pub spi3: Spi3,
    #[doc = "SPI4"]
    pub spi4: Spi4,
    #[doc = "I2S2_EXT"]
    pub i2s2_ext: I2s2Ext,
    #[doc = "I2S3_EXT"]
    pub i2s3_ext: I2s3Ext,
    #[doc = "USART1"]
    pub usart1: Usart1,
    #[doc = "USART2"]
    pub usart2: Usart2,
    #[doc = "USART3"]
    pub usart3: Usart3,
    #[doc = "USART6"]
    pub usart6: Usart6,
    #[doc = "ADC1"]
    pub adc1: Adc1,
    #[doc = "ADC2"]
    pub adc2: Adc2,
    #[doc = "ADC3"]
    pub adc3: Adc3,
    #[doc = "CAN1"]
    pub can1: Can1,
    #[doc = "CAN2"]
    pub can2: Can2,
    #[doc = "DAC"]
    pub dac: Dac,
    #[doc = "DEBUG"]
    pub debug: Debug,
    #[doc = "UART4"]
    pub uart4: Uart4,
    #[doc = "UART5"]
    pub uart5: Uart5,
    #[doc = "UART7"]
    pub uart7: Uart7,
    #[doc = "UART8"]
    pub uart8: Uart8,
    #[doc = "CRC"]
    pub crc: Crc,
    #[doc = "FLASH"]
    pub flash: Flash,
    #[doc = "USBFS"]
    pub usbfs: Usbfs,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        unsafe { DEVICE_PERIPHERALS = true };
        Peripherals {
            xmc: unsafe { Xmc::steal() },
            pwc: unsafe { Pwc::steal() },
            crm: unsafe { Crm::steal() },
            gpioa: unsafe {Gpioa::steal()},
            gpiob: unsafe { Gpiob::steal() },
            gpioc: unsafe { Gpioc::steal() },
            gpiod: unsafe { Gpiod::steal() },
            gpioe: unsafe { Gpioe::steal() },
            iomux: unsafe { Iomux::steal() },
            exint: unsafe { Exint::steal() },
            dma1: unsafe { Dma1::steal() },
            dma2: unsafe { Dma2::steal() },
            sdio1: unsafe { Sdio1::steal() },
            sdio2: unsafe { Sdio2::steal() },
            rtc: unsafe { Rtc::steal() },
            bpr: unsafe { Bpr::steal() },
            wdt: unsafe { Wdt::steal() },
            wwdt: unsafe { Wwdt::steal() },
            tmr1: unsafe { Tmr1::steal() },
            tmr8: unsafe { Tmr8::steal() },
            tmr2: unsafe { Tmr2::steal() },
            tmr3: unsafe { Tmr3::steal() },
            tmr4: unsafe { Tmr4::steal() },
            tmr5: unsafe { Tmr5::steal() },
            tmr9: unsafe { Tmr9::steal() },
            tmr12: unsafe { Tmr12::steal() },
            tmr10: unsafe { Tmr10::steal() },
            tmr11: unsafe { Tmr11::steal() },
            acc: unsafe { Acc::steal() },
            tmr13: unsafe { Tmr13::steal() },
            tmr14: unsafe { Tmr14::steal() },
            tmr6: unsafe { Tmr6::steal() },
            tmr7: unsafe { Tmr7::steal() },
            i2c1: unsafe { I2c1::steal() },
            i2c2: unsafe { I2c2::steal() },
            i2c3: unsafe { I2c3::steal() },
            spi1: unsafe { Spi1::steal() },
            spi2: unsafe { Spi2::steal() },
            spi3: unsafe { Spi3::steal() },
            spi4: unsafe { Spi4::steal() },
            i2s2_ext: unsafe { I2s2Ext::steal() },
            i2s3_ext: unsafe { I2s3Ext::steal() },
            usart1: unsafe { Usart1::steal() },
            usart2: unsafe { Usart2::steal() },
            usart3: unsafe { Usart3::steal() },
            usart6: unsafe { Usart6::steal() },
            adc1: unsafe { Adc1::steal() },
            adc2: unsafe { Adc2::steal() },
            adc3: unsafe { Adc3::steal() },
            can1: unsafe { Can1::steal() },
            can2: unsafe { Can2::steal() },
            dac: unsafe { Dac::steal() },
            debug: unsafe { Debug::steal() },
            uart4: unsafe { Uart4::steal() },
            uart5: unsafe { Uart5::steal() },
            uart7: unsafe { Uart7::steal() },
            uart8: unsafe { Uart8::steal() },
            crc: unsafe { Crc::steal() },
            flash: unsafe { Flash::steal() },
            usbfs: unsafe { Usbfs::steal() },
        }
    }
}
